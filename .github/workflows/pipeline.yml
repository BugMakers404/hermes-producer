name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'

env:
  GRADLE_VERSION: "8.1.1"
  JDK_VERSION: "17"


jobs:
  testAndBuild:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v3

      # secrets.APPLICATION_PROPERTIES is the content instead of the path to application.properties
      - name: Create application.properties
        run:
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.properties

      - name: Create container resources required by hermes-producer
        run:
          docker compose -f docker/local/docker-compose.yaml up -d

      - name: Build with Gradle
        run: |
          GIT_VERSION=$(git describe --tag --always)
          docker run --network host \
                     --rm --mount type=bind,source="$(pwd)",target=/home/gradle/project \
                     -w /home/gradle/project gradle:${{ env.GRADLE_VERSION }}-jdk${{ env.JDK_VERSION }}-jammy \
                     bash -c "gradle -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xms256M -Xmx1g' \
                                     -PhermesProducerAppProps=/home/gradle/project/application.properties \
                                     -PisRunningInPipeline=true \
                                     -i clean check build"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/TEST-*.xml'

      - name: Clean up Docker resources
        if: always()
        run: docker compose -f docker/local/docker-compose.yaml down

      - name: Remove Remove application.properties
        if: always()
        run:
          rm application.properties

  publishTestResults:
    runs-on: ubuntu-22.04
    needs: [ testAndBuild ]
    if: always()

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v3

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results

      - name: Display test results summary
        uses: dorny/test-reporter@v1.6.0
        with:
          name: Test Results
          path: '**/TEST-*.xml'
          reporter: java-junit

  buildAndPush:
    runs-on: ubuntu-22.04

    needs: [ testAndBuild ]
    if: github.ref == 'refs/heads/main' # Only run this job for pushes to the main branch

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-22.04
    needs: [ buildAndPush ]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS Lightsail
        uses: aws-actions/aws-cli@v2
        with:
          entrypoint: /bin/sh
          args: |
            -c "
            echo '${{ secrets.AWS_SSH_PRIVATE_KEY }}' > my_key.pem &&
            chmod 600 my_key.pem &&
            ssh -o StrictHostKeyChecking=no -i my_key.pem ubuntu@${{ secrets.LIGHTSAIL_IP }} '
              docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:latest &&
              CONTAINER_ID=$(docker ps -q --filter ancestor=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:latest) &&
              if [ -n \"$CONTAINER_ID\" ]; then
                docker stop $CONTAINER_ID &&
                docker rm $CONTAINER_ID
              fi &&
              docker run -d --name hermes-producer \
                         --mount type=bind,source=/home/ubuntu/app/application.properties,destination=/app/application.properties \
                         --mount type=bind,source=/home/ubuntu/app/data,destination=/app/vicroad_data_archives \
                         --mount type=bind,source=/home/ubuntu/.aws,destination=/root/.aws \
                         ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:latest'
            "




    
